#ifndef FN_GAUSS_LEGENDRE_WEIGHTS
#define FN_GAUSS_LEGENDRE_WEIGHTS

#include<array>
#include<concepts>

#include "../../utils/index.hh"

namespace GaussLegendre{

    template<std::size_t n> requires (n>0)
    static consteval std::array<double,n> weights(){
        if constexpr (n==1){
            return std::array<double,n>{2.000000000000000000000000};
        }else if constexpr (n==2){
            return std::array<double,n>{1.000000000000000000000000,1.000000000000000000000000};
        }else if constexpr (n==3){
            return std::array<double,n>{0.555555555555555555555556,0.888888888888888888888889,0.555555555555555555555556};
        }else if constexpr (n==4){
            return std::array<double,n>{0.347854845137453857373063,0.652145154862546142626937,0.652145154862546142626937,0.347854845137453857373063};
        }else if constexpr (n==5){
            return std::array<double,n>{0.236926885056189087514264,0.478628670499366468041292,0.568888888888888888888889,0.478628670499366468041292,0.236926885056189087514264};
        }else if constexpr (n==6){
            return std::array<double,n>{0.171324492379170345040296,0.360761573048138607569833,0.467913934572691047389870,0.467913934572691047389870,0.360761573048138607569833,0.171324492379170345040296};
        }else if constexpr (n==7){
            return std::array<double,n>{0.129484966168869693270611,0.279705391489276667901467,0.381830050505118944950369,0.417959183673469387755102,0.381830050505118944950369,0.279705391489276667901467,0.129484966168869693270611};
        }else if constexpr (n==8){
            return std::array<double,n>{0.101228536290376259152532,0.222381034453374470544356,0.313706645877887287337962,0.362683783378361982965150,0.362683783378361982965150,0.313706645877887287337962,0.222381034453374470544356,0.101228536290376259152532};
        }else if constexpr (n==9){
            return std::array<double,n>{0.081274388361574411971892,0.180648160694857404058472,0.260610696402935462318742,0.312347077040002840068630,0.330239355001259763164525,0.312347077040002840068630,0.260610696402935462318742,0.180648160694857404058472,0.081274388361574411971892};
        }else if constexpr (n==10){
            return std::array<double,n>{0.066671344308688137593569,0.149451349150580593145776,0.219086362515982043995534,0.269266719309996355091226,0.295524224714752870173893,0.295524224714752870173893,0.269266719309996355091226,0.219086362515982043995534,0.149451349150580593145776,0.066671344308688137593569};
        }else if constexpr (n==11){
            return std::array<double,n>{0.055668567116173666482753,0.125580369464904624634694,0.186290210927734251426097,0.233193764591990479918523,0.262804544510246662180688,0.272925086777900630714483,0.262804544510246662180688,0.233193764591990479918523,0.186290210927734251426097,0.125580369464904624634694,0.055668567116173666482753};
        }else if constexpr (n==12){
            return std::array<double,n>{0.047175336386511827194616,0.106939325995318430960253,0.160078328543346226334652,0.203167426723065921749058,0.233492536538354808760849,0.249147045813402785000562,0.249147045813402785000562,0.233492536538354808760849,0.203167426723065921749058,0.160078328543346226334652,0.106939325995318430960253,0.047175336386511827194616};
        }else if constexpr (n==13){
            return std::array<double,n>{0.040484004765315879520822,0.092121499837728447914421,0.138873510219787238463601,0.178145980761945738280046,0.207816047536888502312523,0.226283180262897238412090,0.232551553230873910194589,0.226283180262897238412090,0.207816047536888502312523,0.178145980761945738280046,0.138873510219787238463601,0.092121499837728447914421,0.040484004765315879520822};
        }else if constexpr (n==14){
            return std::array<double,n>{0.035119460331751863031832,0.080158087159760209805633,0.121518570687903184689414,0.157203167158193534569601,0.185538397477937813741716,0.205198463721295603965924,0.215263853463157790195876,0.215263853463157790195876,0.205198463721295603965924,0.185538397477937813741716,0.157203167158193534569601,0.121518570687903184689414,0.080158087159760209805633,0.035119460331751863031832};
        }else if constexpr (n==15){
            return std::array<double,n>{0.030753241996117268354442,0.070366047488108124709267,0.107159220467171935011869,0.139570677926154314447804,0.166269205816993933553200,0.186161000015562211026800,0.198431485327111576456118,0.202578241925561272880620,0.198431485327111576456118,0.186161000015562211026800,0.166269205816993933553200,0.139570677926154314447804,0.107159220467171935011869,0.070366047488108124709267,0.030753241996117268354442};
        }else if constexpr (n==16){
            return std::array<double,n>{0.027152459411754094851780,0.062253523938647892862843,0.095158511682492784809925,0.124628971255533872052476,0.149595988816576732081501,0.169156519395002538189312,0.182603415044923588866763,0.189450610455068496285396,0.189450610455068496285396,0.182603415044923588866763,0.169156519395002538189312,0.149595988816576732081501,0.124628971255533872052476,0.095158511682492784809925,0.062253523938647892862843,0.027152459411754094851780};
        }else if constexpr (n==17){
            return std::array<double,n>{0.024148302868547931960110,0.055459529373987201129440,0.085036148317179180883535,0.111883847193403971094788,0.135136368468525473286320,0.154045761076810288081431,0.168004102156450044509461,0.176562705366992646325270,0.179446470356206525458265,0.176562705366992646325270,0.168004102156450044509461,0.154045761076810288081431,0.135136368468525473286320,0.111883847193403971094788,0.085036148317179180883535,0.055459529373987201129440,0.024148302868547931960110};
        }else if constexpr (n==18){
            return std::array<double,n>{0.021616013526483310313342,0.049714548894969796453334,0.076425730254889056529129,0.100942044106287165562814,0.122555206711478460184519,0.140642914670650651204732,0.154684675126265244925418,0.164276483745832722986053,0.169142382963143591840656,0.169142382963143591840656,0.164276483745832722986053,0.154684675126265244925418,0.140642914670650651204732,0.122555206711478460184519,0.100942044106287165562814,0.076425730254889056529129,0.049714548894969796453334,0.021616013526483310313342};
        }else if constexpr (n==19){
            return std::array<double,n>{};
        }else if constexpr (n==20){
            return std::array<double,n>{};
        }else{
            return std::array<double,n>{};
        }   
    };

    template <std::size_t... n> // n: Number of quadrature points in each direction.
    static consteval auto CellWeights(){

        static constexpr std::size_t dim    {sizeof...(n)};
        static constexpr std::size_t n_nodes{(n*...)};
        static constexpr std::tuple< std::array<double,n>...> dir_weights{weights<n>()...}; //Weights for each direction.
        
        std::array<double,n_nodes> weight_list{};

        for(auto i = 0; i < n_nodes; ++i){
            [&]<std::size_t... Is>(std::index_sequence<Is...>){
                weight_list[i] = (std::get<Is>(dir_weights)[utils::list_2_md_index<n...>(i)[Is]] * ...);
            }(std::make_index_sequence<dim>{});
        }
        return weight_list;
    };
        


} // namespace GaussLegendre


/*
    template<std::size_t OrderX,std::size_t OrderY=OrderX> requires (OrderX>0 && OrderY>0)
    static consteval std::array<double,OrderX*OrderY> Weights2D(){
        std::array<double,OrderX*OrderY> W;
        int pos = 0;
        for(auto&& i:Weights1D<OrderX>()){
            for(auto&& j:Weights1D<OrderY>()){
                W[pos] = i*j;
                ++pos; 
            }
        }
        return W;
    };

    template<std::size_t OrderX,std::size_t OrderY=OrderX, std::size_t OrderZ=OrderY> 
    requires (OrderX>0 && OrderY>0 && OrderZ>0)
    static consteval std::array<double,OrderX*OrderY*OrderZ> Weights3D(){
        std::array<double,OrderX*OrderY*OrderZ> W;
        int pos = 0;
        for(auto&& i:Weights1D<OrderX>()){
            for(auto&& j:Weights1D<OrderY>()){
                for(auto&& k:Weights1D<OrderZ>()){
                    W[pos] = i*j*k;
                    ++pos; 
                }
            }
        }
        return W;
    };

    // Wrapper
    template<std::size_t Dim, std::size_t OrderX,std::size_t OrderY=OrderX, std::size_t OrderZ=OrderY> 
    requires (OrderX>0 && OrderY>0 && OrderZ>0)
    static consteval auto Weights(){
        if constexpr (Dim==1){
            return Weights1D<OrderX>();
        }else if constexpr (Dim==2){
            return Weights2D<OrderX,OrderY>();
        }else if constexpr (Dim==3){
            return Weights3D<OrderX,OrderY,OrderZ>();
        }else{
            return std::array<double,0>{};
        }
    };

*/




#endif // FN_GAUSS_LEGENDRE_WEIGHTS